vi Deployment.yaml
# Deployment >> Pod 

# i
# apiVersion: apps/v1
# kind: Deployment ***복제본(replicas)을 3개 만드는 Deployment***
# metadata:
# 	name: nginx-deployment
# 	labels:
# 		app: nginx
# spec:
# 	replicas: 3
# 	selector:
# 		matchLabels: 
# 			app: nginx
# 	template:
# 		metadata:
# 			labels:
# 				app: nginx
# 		spec:
#  			containers:
# 				- name: nginx
# 				  image: nginx: 1.14.2
# 				  ports:
#					- containerPort: 80
# esc
# :wq     *<- ":qw" is not working by the way... 

kubectl apply -f Deployment.yaml
# deployment.apps/nginx-deployment created

kubectl get deployment
# NAME               READY   UP-TO-DATE   AVAILABLE   AGE
# nginx-deployment   1/3     3            1           10s

kubectl get deployment
# NAME               READY   UP-TO-DATE   AVAILABLE   AGE
# nginx-deployment   3/3     3            3           10s

kubectl get pod
# NAME                                READY   STATUS    RESTARTS   AGE
# nginx-deployment-66b6c48dd5-7rtjx   1/1     Running   0          3m39s
# nginx-deployment-66b6c48dd5-nx67l   1/1     Running   0          3m39s
# nginx-deployment-66b6c48dd5-zfhqk   1/1     Running   0          3m39s

# CHECK AUTO HEALING

# remove 1st pod
kubectl delete pod nginx-deployment-66b6c48dd5-7rtjx 

kubectl get pod
# NAME                                READY   STATUS    RESTARTS   AGE
# nginx-deployment-66b6c48dd5-hmpj6   1/1     Running   0          8s
# nginx-deployment-66b6c48dd5-nx67l   1/1     Running   0          5m43s
# nginx-deployment-66b6c48dd5-zfhqk   1/1     Running   0          5m43s

kubectl scale deployment/nginx-deployment --replicas=5
# NAME                                READY   STATUS    RESTARTS   AGE
# nginx-deployment-66b6c48dd5-9kqx5   1/1     Running   0          7s
# nginx-deployment-66b6c48dd5-9tpk8   1/1     Running   0          7s
# nginx-deployment-66b6c48dd5-hmpj6   1/1     Running   0          87s
# nginx-deployment-66b6c48dd5-nx67l   1/1     Running   0          7m2s
# nginx-deployment-66b6c48dd5-zfhqk   1/1     Running   0          7m2s
# nginx-deployment 가 작아서 가능함.

kubectl scale deployment/nginx-deployment --replicas=20
# NAME                                READY   STATUS              RESTARTS   AGE
# nginx-deployment-66b6c48dd5-7dbdx   0/1     ContainerCreating   0          4s
# nginx-deployment-66b6c48dd5-7fvvr   0/1     Pending             0          4s
# nginx-deployment-66b6c48dd5-9kqx5   1/1     Running             0          59s
# nginx-deployment-66b6c48dd5-9tpk8   1/1     Running             0          59s
# nginx-deployment-66b6c48dd5-9x2h5   0/1     ContainerCreating   0          4s
# nginx-deployment-66b6c48dd5-bcqzg   0/1     ContainerCreating   0          4s
# nginx-deployment-66b6c48dd5-ddnb4   0/1     ContainerCreating   0          4s
# nginx-deployment-66b6c48dd5-g85pn   0/1     ContainerCreating   0          4s
# nginx-deployment-66b6c48dd5-hmpj6   1/1     Running             0          2m19s
# nginx-deployment-66b6c48dd5-jdl42   0/1     Pending             0          4s
# nginx-deployment-66b6c48dd5-l9csf   0/1     ContainerCreating   0          4s
# nginx-deployment-66b6c48dd5-lnxhc   0/1     Pending             0          4s
# nginx-deployment-66b6c48dd5-nx67l   1/1     Running             0          7m54s
# nginx-deployment-66b6c48dd5-ppgql   0/1     ContainerCreating   0          4s
# nginx-deployment-66b6c48dd5-rhhl8   0/1     Pending             0          4s
# nginx-deployment-66b6c48dd5-wqsqd   0/1     Pending             0          4s
# nginx-deployment-66b6c48dd5-z4mdk   0/1     ContainerCreating   0          4s
# nginx-deployment-66b6c48dd5-zb6g2   0/1     Pending             0          4s
# nginx-deployment-66b6c48dd5-zfhqk   1/1     Running             0          7m54s
# nginx-deployment-66b6c48dd5-zhxhr   0/1     Pending             0          4s
# STATUS가 Pending 상태인걸 확일 할 수 있음
 
# 전체 삭제
kubectl delete deployment nginx-deployment

kubectl apply -f Deployment.yaml
kubectl scale deployment/nginx-deployment --replicas=0
kubectl get pod
# No resources found in default namespace. * Error는 나오지 않음, Deployment는 존재하지만 Pod만 없는 상태, 

kubectl scale deployment/nginx-deployment --replicas=3
kubectl get pod -o wide
# NAME                                READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES
# nginx-deployment-66b6c48dd5-5gxzl   1/1     Running   0          56s   172.17.0.4   minikube   <none>           <none>
# nginx-deployment-66b6c48dd5-rnnvs   1/1     Running   0          56s   172.17.0.3   minikube   <none>           <none>
# nginx-deployment-66b6c48dd5-rxgcv   1/1     Running   0          56s   172.17.0.5   minikube   <none>           <none>

# 위에 ip로 접속해보기?!?
curl -X GET 172.17.0.4 -vvv
# 쿠버네티스 내부에서만 사용하는 ip주소이기 때문에 접속x
# 다른곳에서 접속하려면 풀어줘야함

# 다른곳에 서버가 돌아가는지 확인
ping address.com

# 위의 아이피로 접속해보기 위한 yaml파일 생성!!!
vi Service.yaml
apiVersion: v1
kind: Service
metadata:
	name: my-nginx
	labels:
		run: my-nginx
spec:
	type: NodePort
	ports: 
		-port: 80
		 protocol: TCP
	selector:
		app: nginx

kubectl apply -f Service.yaml
kubectl get service
curl -X GET 10.110.82.21:80

# 서비서는 내부 파드가 외부의 서버들과 연결해 주는 방법


